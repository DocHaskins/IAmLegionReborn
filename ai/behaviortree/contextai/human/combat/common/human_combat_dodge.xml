<?xml version="1.0"?>
<BehaviorTree xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../../../MetaData/schema_ai.xsd" m_ContextType="ai">
    <SequenceMem>
        <Opr_RequestBark m_BarkID="combat_dodge" m_Priority="Medium"/>
        <SelectorMem>
            <Optional m_Enabled="$enable_dodge_on_spot">
                <SequenceMem>
                    <Cnd_IsTargetAttacking m_Target="#target"/>
                    <Cnd_IsTargetPerformingPowerAttack m_Target="#target" m_Invert="true"/>
                    <Cnd_IsTargetUsingWeapon m_Target="#target" m_WeaponType="TwoHandedMelee" m_Invert="true"/>
                    <SelectorMem>
                        <SequenceMem>
                            <Selector>
                                <Cnd_Random m_Value="0.5"/>
                                <Cnd_IsTargetUsingWeapon m_Target="#target" m_WeaponType="TwoHandedMelee"/>
                            </Selector>
                            <Cnd_SpaceInSimpleDirection m_Direction="BACKWARD" m_MinRequiredSpace="$enviro_space_required" m_CheckHalfAngle="$enviro_space_half_angle"/>
                            <Act_Dodge m_Target="#target" m_Type="ON_SPOT" m_Direction="BACKWARD" m_StartPolicy="DISCARD" m_AbandonPolicy="INTERRUPT" m_DecisionPolicy="WHEN_POSSIBLE"/>
                        </SequenceMem>
                        <SequenceMem>
                            <Cnd_IsTargetAttackingInDirection m_Target="#target" m_Direction="LEFT"/>
                            <Act_Dodge m_Target="#target" m_Type="ON_SPOT" m_Direction="LEFT" m_StartPolicy="DISCARD" m_AbandonPolicy="INTERRUPT" m_DecisionPolicy="WHEN_POSSIBLE"/>
                        </SequenceMem>
                        <Act_Dodge m_Target="#target" m_Type="ON_SPOT" m_Direction="RIGHT" m_StartPolicy="DISCARD" m_AbandonPolicy="INTERRUPT" m_DecisionPolicy="WHEN_POSSIBLE"/>
                    </SelectorMem>
                </SequenceMem>
            </Optional>
            <SequenceMem>
                <Cnd_OnLeftOfTarget m_Target="#target"/>
                <SelectorMem>
                    <SequenceMem>
                        <Selector>
                            <Cnd_SpaceInSimpleDirection m_Direction="RIGHT" m_MinRequiredSpace="$enviro_space_required" m_CheckHalfAngle="$enviro_space_half_angle"/>
                            <Cnd_SpaceInSimpleDirection m_Direction="LEFT" m_MinRequiredSpace="$enviro_space_required" m_CheckHalfAngle="$enviro_space_half_angle" m_Invert="true"/>
                        </Selector>
                        <Act_Dodge m_Target="#target" m_Type="Evade" m_Direction="RIGHT" m_StartPolicy="DISCARD" m_AbandonPolicy="INTERRUPT" m_DecisionPolicy="WHEN_POSSIBLE"/>
                    </SequenceMem>
                    <Act_Dodge m_Target="#target" m_Type="Evade" m_Direction="LEFT" m_StartPolicy="DISCARD" m_AbandonPolicy="INTERRUPT" m_DecisionPolicy="WHEN_POSSIBLE"/>
                </SelectorMem>
            </SequenceMem>
            <SequenceMem>
                <Selector>
                    <Cnd_SpaceInSimpleDirection m_Direction="LEFT" m_MinRequiredSpace="$enviro_space_required" m_CheckHalfAngle="$enviro_space_half_angle"/>
                    <Cnd_SpaceInSimpleDirection m_Direction="RIGHT" m_MinRequiredSpace="$enviro_space_required" m_CheckHalfAngle="$enviro_space_half_angle" m_Invert="true"/>
                </Selector>
                <Act_Dodge m_Target="#target" m_Type="Evade" m_Direction="LEFT" m_StartPolicy="DISCARD" m_AbandonPolicy="INTERRUPT" m_DecisionPolicy="WHEN_POSSIBLE"/>
            </SequenceMem>
            <Act_Dodge m_Target="#target" m_Type="Evade" m_Direction="RIGHT" m_StartPolicy="DISCARD" m_AbandonPolicy="INTERRUPT" m_DecisionPolicy="WHEN_POSSIBLE"/>
        </SelectorMem>
    </SequenceMem>
</BehaviorTree>
